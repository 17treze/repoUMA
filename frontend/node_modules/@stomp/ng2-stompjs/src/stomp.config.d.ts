import { StompHeaders } from './stomp-headers';
/**
 * Represents a configuration object for the
 * STOMPService to connect to.
 */
import * as ɵngcc0 from '@angular/core';
export declare class StompConfig {
    /**
     * Server URL to connect to. Please refer to your STOMP broker documentation for details.
     *
     * Example: ws://127.0.0.1:15674/ws (for a RabbitMQ default setup running on localhost)
     *
     * Alternatively this parameter can be a function that returns an object similar to WebSocket
     * (typically SockJS instance).
     *
     * Example:
     *
     * () => {
     *   return new SockJS('http://127.0.0.1:15674/stomp');
     * }
     */
    url: string | (() => any);
    /**
     * Headers
     * Typical keys: login: string, passcode: string.
     * host:string will neeed to be passed for virtual hosts in RabbitMQ
     */
    headers: StompHeaders;
    /** How often to incoming heartbeat?
     * Interval in milliseconds, set to 0 to disable
     *
     * Typical value 0 - disabled
     */
    heartbeat_in: number;
    /**
     * How often to outgoing heartbeat?
     * Interval in milliseconds, set to 0 to disable
     *
     * Typical value 20000 - every 20 seconds
     */
    heartbeat_out: number;
    /**
     * Wait in milliseconds before attempting auto reconnect
     * Set to 0 to disable
     *
     * Typical value 5000 (5 seconds)
     */
    reconnect_delay: number;
    /** Enable client debugging? */
    debug: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StompConfig, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<StompConfig>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvbXAuY29uZmlnLmQudHMiLCJzb3VyY2VzIjpbInN0b21wLmNvbmZpZy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9tcEhlYWRlcnMgfSBmcm9tICcuL3N0b21wLWhlYWRlcnMnO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHRoZVxuICogU1RPTVBTZXJ2aWNlIHRvIGNvbm5lY3QgdG8uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b21wQ29uZmlnIHtcbiAgICAvKipcbiAgICAgKiBTZXJ2ZXIgVVJMIHRvIGNvbm5lY3QgdG8uIFBsZWFzZSByZWZlciB0byB5b3VyIFNUT01QIGJyb2tlciBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWxzLlxuICAgICAqXG4gICAgICogRXhhbXBsZTogd3M6Ly8xMjcuMC4wLjE6MTU2NzQvd3MgKGZvciBhIFJhYmJpdE1RIGRlZmF1bHQgc2V0dXAgcnVubmluZyBvbiBsb2NhbGhvc3QpXG4gICAgICpcbiAgICAgKiBBbHRlcm5hdGl2ZWx5IHRoaXMgcGFyYW1ldGVyIGNhbiBiZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgc2ltaWxhciB0byBXZWJTb2NrZXRcbiAgICAgKiAodHlwaWNhbGx5IFNvY2tKUyBpbnN0YW5jZSkuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogKCkgPT4ge1xuICAgICAqICAgcmV0dXJuIG5ldyBTb2NrSlMoJ2h0dHA6Ly8xMjcuMC4wLjE6MTU2NzQvc3RvbXAnKTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdXJsOiBzdHJpbmcgfCAoKCkgPT4gYW55KTtcbiAgICAvKipcbiAgICAgKiBIZWFkZXJzXG4gICAgICogVHlwaWNhbCBrZXlzOiBsb2dpbjogc3RyaW5nLCBwYXNzY29kZTogc3RyaW5nLlxuICAgICAqIGhvc3Q6c3RyaW5nIHdpbGwgbmVlZWQgdG8gYmUgcGFzc2VkIGZvciB2aXJ0dWFsIGhvc3RzIGluIFJhYmJpdE1RXG4gICAgICovXG4gICAgaGVhZGVyczogU3RvbXBIZWFkZXJzO1xuICAgIC8qKiBIb3cgb2Z0ZW4gdG8gaW5jb21pbmcgaGVhcnRiZWF0P1xuICAgICAqIEludGVydmFsIGluIG1pbGxpc2Vjb25kcywgc2V0IHRvIDAgdG8gZGlzYWJsZVxuICAgICAqXG4gICAgICogVHlwaWNhbCB2YWx1ZSAwIC0gZGlzYWJsZWRcbiAgICAgKi9cbiAgICBoZWFydGJlYXRfaW46IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBIb3cgb2Z0ZW4gdG8gb3V0Z29pbmcgaGVhcnRiZWF0P1xuICAgICAqIEludGVydmFsIGluIG1pbGxpc2Vjb25kcywgc2V0IHRvIDAgdG8gZGlzYWJsZVxuICAgICAqXG4gICAgICogVHlwaWNhbCB2YWx1ZSAyMDAwMCAtIGV2ZXJ5IDIwIHNlY29uZHNcbiAgICAgKi9cbiAgICBoZWFydGJlYXRfb3V0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogV2FpdCBpbiBtaWxsaXNlY29uZHMgYmVmb3JlIGF0dGVtcHRpbmcgYXV0byByZWNvbm5lY3RcbiAgICAgKiBTZXQgdG8gMCB0byBkaXNhYmxlXG4gICAgICpcbiAgICAgKiBUeXBpY2FsIHZhbHVlIDUwMDAgKDUgc2Vjb25kcylcbiAgICAgKi9cbiAgICByZWNvbm5lY3RfZGVsYXk6IG51bWJlcjtcbiAgICAvKiogRW5hYmxlIGNsaWVudCBkZWJ1Z2dpbmc/ICovXG4gICAgZGVidWc6IGJvb2xlYW47XG59XG4iXX0=