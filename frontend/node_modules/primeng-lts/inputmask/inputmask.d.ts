import { ElementRef, OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng-lts/inputtext';
export declare const INPUTMASK_VALUE_ACCESSOR: any;
export declare class InputMask implements OnInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    type: string;
    slotChar: string;
    autoClear: boolean;
    style: any;
    inputId: string;
    styleClass: string;
    placeholder: string;
    size: number;
    maxlength: number;
    tabindex: string;
    title: string;
    ariaLabel: string;
    ariaRequired: boolean;
    disabled: boolean;
    readonly: boolean;
    unmask: boolean;
    name: string;
    required: boolean;
    characterPattern: string;
    autoFocus: boolean;
    autocomplete: string;
    inputViewChild: ElementRef;
    onComplete: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onInput: EventEmitter<any>;
    onKeydown: EventEmitter<any>;
    value: any;
    _mask: string;
    onModelChange: Function;
    onModelTouched: Function;
    input: HTMLInputElement;
    filled: boolean;
    defs: any;
    tests: any[];
    partialPosition: any;
    firstNonMaskPos: number;
    lastRequiredNonMaskPos: any;
    len: number;
    oldVal: string;
    buffer: any;
    defaultBuffer: string;
    focusText: string;
    caretTimeoutId: any;
    androidChrome: boolean;
    focused: boolean;
    constructor(el: ElementRef);
    ngOnInit(): void;
    mask: string;
    initMask(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    caret(first?: number, last?: number): {
        begin: any;
        end: any;
    };
    isCompleted(): boolean;
    getPlaceholder(i: number): string;
    seekNext(pos: any): any;
    seekPrev(pos: any): any;
    shiftL(begin: number, end: number): void;
    shiftR(pos: any): void;
    handleAndroidInput(e: any): void;
    onInputBlur(e: any): void;
    onInputKeydown(e: any): void;
    onKeyPress(e: any): void;
    clearBuffer(start: any, end: any): void;
    writeBuffer(): void;
    checkVal(allow?: boolean): any;
    onInputFocus(event: any): void;
    onInputChange(event: any): void;
    handleInputChange(event: any): void;
    getUnmaskedValue(): string;
    updateModel(e: any): void;
    updateFilledState(): void;
    focus(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InputMask, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InputMask, "p-inputMask", never, { "type": "type"; "slotChar": "slotChar"; "autoClear": "autoClear"; "characterPattern": "characterPattern"; "mask": "mask"; "disabled": "disabled"; "style": "style"; "inputId": "inputId"; "styleClass": "styleClass"; "placeholder": "placeholder"; "size": "size"; "maxlength": "maxlength"; "tabindex": "tabindex"; "title": "title"; "ariaLabel": "ariaLabel"; "ariaRequired": "ariaRequired"; "readonly": "readonly"; "unmask": "unmask"; "name": "name"; "required": "required"; "autoFocus": "autoFocus"; "autocomplete": "autocomplete"; }, { "onComplete": "onComplete"; "onFocus": "onFocus"; "onBlur": "onBlur"; "onInput": "onInput"; "onKeydown": "onKeydown"; }, never, never>;
}
export declare class InputMaskModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<InputMaskModule, [typeof InputMask], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.InputTextModule], [typeof InputMask]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<InputMaskModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRtYXNrLmQudHMiLCJzb3VyY2VzIjpbImlucHV0bWFzay5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IElOUFVUTUFTS19WQUxVRV9BQ0NFU1NPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5wdXRNYXNrIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgc2xvdENoYXI6IHN0cmluZztcbiAgICBhdXRvQ2xlYXI6IGJvb2xlYW47XG4gICAgc3R5bGU6IGFueTtcbiAgICBpbnB1dElkOiBzdHJpbmc7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgc2l6ZTogbnVtYmVyO1xuICAgIG1heGxlbmd0aDogbnVtYmVyO1xuICAgIHRhYmluZGV4OiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICBhcmlhUmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgdW5tYXNrOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICBjaGFyYWN0ZXJQYXR0ZXJuOiBzdHJpbmc7XG4gICAgYXV0b0ZvY3VzOiBib29sZWFuO1xuICAgIGF1dG9jb21wbGV0ZTogc3RyaW5nO1xuICAgIGlucHV0Vmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIG9uQ29tcGxldGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25JbnB1dDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25LZXlkb3duOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB2YWx1ZTogYW55O1xuICAgIF9tYXNrOiBzdHJpbmc7XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGZpbGxlZDogYm9vbGVhbjtcbiAgICBkZWZzOiBhbnk7XG4gICAgdGVzdHM6IGFueVtdO1xuICAgIHBhcnRpYWxQb3NpdGlvbjogYW55O1xuICAgIGZpcnN0Tm9uTWFza1BvczogbnVtYmVyO1xuICAgIGxhc3RSZXF1aXJlZE5vbk1hc2tQb3M6IGFueTtcbiAgICBsZW46IG51bWJlcjtcbiAgICBvbGRWYWw6IHN0cmluZztcbiAgICBidWZmZXI6IGFueTtcbiAgICBkZWZhdWx0QnVmZmVyOiBzdHJpbmc7XG4gICAgZm9jdXNUZXh0OiBzdHJpbmc7XG4gICAgY2FyZXRUaW1lb3V0SWQ6IGFueTtcbiAgICBhbmRyb2lkQ2hyb21lOiBib29sZWFuO1xuICAgIGZvY3VzZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbWFzazogc3RyaW5nO1xuICAgIGluaXRNYXNrKCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKHZhbDogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2FyZXQoZmlyc3Q/OiBudW1iZXIsIGxhc3Q/OiBudW1iZXIpOiB7XG4gICAgICAgIGJlZ2luOiBhbnk7XG4gICAgICAgIGVuZDogYW55O1xuICAgIH07XG4gICAgaXNDb21wbGV0ZWQoKTogYm9vbGVhbjtcbiAgICBnZXRQbGFjZWhvbGRlcihpOiBudW1iZXIpOiBzdHJpbmc7XG4gICAgc2Vla05leHQocG9zOiBhbnkpOiBhbnk7XG4gICAgc2Vla1ByZXYocG9zOiBhbnkpOiBhbnk7XG4gICAgc2hpZnRMKGJlZ2luOiBudW1iZXIsIGVuZDogbnVtYmVyKTogdm9pZDtcbiAgICBzaGlmdFIocG9zOiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUFuZHJvaWRJbnB1dChlOiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRCbHVyKGU6IGFueSk6IHZvaWQ7XG4gICAgb25JbnB1dEtleWRvd24oZTogYW55KTogdm9pZDtcbiAgICBvbktleVByZXNzKGU6IGFueSk6IHZvaWQ7XG4gICAgY2xlYXJCdWZmZXIoc3RhcnQ6IGFueSwgZW5kOiBhbnkpOiB2b2lkO1xuICAgIHdyaXRlQnVmZmVyKCk6IHZvaWQ7XG4gICAgY2hlY2tWYWwoYWxsb3c/OiBib29sZWFuKTogYW55O1xuICAgIG9uSW5wdXRGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGdldFVubWFza2VkVmFsdWUoKTogc3RyaW5nO1xuICAgIHVwZGF0ZU1vZGVsKGU6IGFueSk6IHZvaWQ7XG4gICAgdXBkYXRlRmlsbGVkU3RhdGUoKTogdm9pZDtcbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbnB1dE1hc2tNb2R1bGUge1xufVxuIl19