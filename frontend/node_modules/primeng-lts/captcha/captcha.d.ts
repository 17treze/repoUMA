import { AfterViewInit, EventEmitter, NgZone, OnDestroy, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class Captcha implements AfterViewInit, OnDestroy {
    el: ElementRef;
    _zone: NgZone;
    siteKey: string;
    theme: string;
    type: string;
    size: string;
    tabindex: number;
    initCallback: string;
    onResponse: EventEmitter<any>;
    onExpire: EventEmitter<any>;
    private _instance;
    private _language;
    language: string;
    constructor(el: ElementRef, _zone: NgZone);
    ngAfterViewInit(): void;
    init(): void;
    reset(): void;
    getResponse(): String;
    recaptchaCallback(response: string): void;
    recaptchaExpiredCallback(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Captcha, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Captcha, "p-captcha", never, { "siteKey": "siteKey"; "theme": "theme"; "type": "type"; "size": "size"; "tabindex": "tabindex"; "initCallback": "initCallback"; "language": "language"; }, { "onResponse": "onResponse"; "onExpire": "onExpire"; }, never, never>;
}
export declare class CaptchaModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<CaptchaModule, [typeof Captcha], [typeof ɵngcc1.CommonModule], [typeof Captcha]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<CaptchaModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdGNoYS5kLnRzIiwic291cmNlcyI6WyJjYXB0Y2hhLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcHRjaGEgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIF96b25lOiBOZ1pvbmU7XG4gICAgc2l0ZUtleTogc3RyaW5nO1xuICAgIHRoZW1lOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHNpemU6IHN0cmluZztcbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIGluaXRDYWxsYmFjazogc3RyaW5nO1xuICAgIG9uUmVzcG9uc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXhwaXJlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcml2YXRlIF9pbnN0YW5jZTtcbiAgICBwcml2YXRlIF9sYW5ndWFnZTtcbiAgICBsYW5ndWFnZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBfem9uZTogTmdab25lKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBpbml0KCk6IHZvaWQ7XG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICBnZXRSZXNwb25zZSgpOiBTdHJpbmc7XG4gICAgcmVjYXB0Y2hhQ2FsbGJhY2socmVzcG9uc2U6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVjYXB0Y2hhRXhwaXJlZENhbGxiYWNrKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcHRjaGFNb2R1bGUge1xufVxuIl19