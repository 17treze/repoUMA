import { ElementRef, AfterContentInit, TemplateRef, QueryList, NgZone, EventEmitter, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng-lts/api';
export declare class Carousel implements AfterContentInit {
    el: ElementRef;
    zone: NgZone;
    page: number;
    numVisible: number;
    numScroll: number;
    responsiveOptions: any[];
    orientation: string;
    verticalViewPortHeight: string;
    contentClass: String;
    dotsContainerClass: String;
    dotsContainerStyle: any;
    indicatorStyleClass: string;
    indicatorStyle: any;
    value: any[];
    circular: boolean;
    showIndicators: boolean;
    showNavigators: boolean;
    autoplayInterval: number;
    style: any;
    styleClass: string;
    onPage: EventEmitter<any>;
    itemsContainer: ElementRef;
    headerFacet: any;
    footerFacet: any;
    templates: QueryList<any>;
    _numVisible: number;
    _numScroll: number;
    _oldNumScroll: number;
    prevState: any;
    defaultNumScroll: number;
    defaultNumVisible: number;
    _page: number;
    _value: any[];
    carouselStyle: any;
    id: string;
    totalShiftedItems: any;
    isRemainingItemsAdded: boolean;
    animationTimeout: any;
    translateTimeout: any;
    remainingItems: number;
    _items: any[];
    startPos: any;
    documentResizeListener: any;
    clonedItemsForStarting: any[];
    clonedItemsForFinishing: any[];
    allowAutoplay: boolean;
    interval: any;
    isCreated: boolean;
    swipeThreshold: number;
    itemTemplate: TemplateRef<any>;
    constructor(el: ElementRef, zone: NgZone);
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    ngOnChanges(simpleChange: SimpleChanges): void;
    createStyle(): void;
    calculatePosition(): void;
    setCloneItems(): void;
    firstIndex(): number;
    lastIndex(): number;
    totalDots(): number;
    totalDotsArray(): any[];
    containerClass(): {
        'ui-carousel ui-widget': boolean;
        'ui-carousel-vertical': boolean;
        'ui-carousel-horizontal': boolean;
    };
    contentClasses(): string;
    dotsContentClasses(): string;
    isVertical(): boolean;
    isCircular(): boolean;
    isAutoplay(): boolean;
    isForwardNavDisabled(): boolean;
    isBackwardNavDisabled(): boolean;
    isEmpty(): boolean;
    navForward(e: any, index?: any): void;
    navBackward(e: any, index?: any): void;
    onDotClick(e: any, index: any): void;
    step(dir: any, page: any): void;
    startAutoplay(): void;
    stopAutoplay(): void;
    onTransitionEnd(): void;
    onTouchStart(e: any): void;
    onTouchMove(e: any): void;
    onTouchEnd(e: any): void;
    changePageOnTouch(e: any, diff: any): void;
    bindDocumentListeners(): void;
    unbindDocumentListeners(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Carousel, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Carousel, "p-carousel", never, { "orientation": "orientation"; "verticalViewPortHeight": "verticalViewPortHeight"; "contentClass": "contentClass"; "dotsContainerClass": "dotsContainerClass"; "indicatorStyleClass": "indicatorStyleClass"; "circular": "circular"; "showIndicators": "showIndicators"; "showNavigators": "showNavigators"; "autoplayInterval": "autoplayInterval"; "page": "page"; "numVisible": "numVisible"; "numScroll": "numScroll"; "value": "value"; "responsiveOptions": "responsiveOptions"; "dotsContainerStyle": "dotsContainerStyle"; "indicatorStyle": "indicatorStyle"; "style": "style"; "styleClass": "styleClass"; }, { "onPage": "onPage"; }, ["headerFacet", "footerFacet", "templates"], ["p-header", "p-footer"]>;
}
export declare class CarouselModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<CarouselModule, [typeof Carousel], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule], [typeof ɵngcc1.CommonModule, typeof Carousel, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<CarouselModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuZC50cyIsInNvdXJjZXMiOlsiY2Fyb3VzZWwuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJDb250ZW50SW5pdCwgVGVtcGxhdGVSZWYsIFF1ZXJ5TGlzdCwgTmdab25lLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcm91c2VsIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgem9uZTogTmdab25lO1xuICAgIHBhZ2U6IG51bWJlcjtcbiAgICBudW1WaXNpYmxlOiBudW1iZXI7XG4gICAgbnVtU2Nyb2xsOiBudW1iZXI7XG4gICAgcmVzcG9uc2l2ZU9wdGlvbnM6IGFueVtdO1xuICAgIG9yaWVudGF0aW9uOiBzdHJpbmc7XG4gICAgdmVydGljYWxWaWV3UG9ydEhlaWdodDogc3RyaW5nO1xuICAgIGNvbnRlbnRDbGFzczogU3RyaW5nO1xuICAgIGRvdHNDb250YWluZXJDbGFzczogU3RyaW5nO1xuICAgIGRvdHNDb250YWluZXJTdHlsZTogYW55O1xuICAgIGluZGljYXRvclN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBpbmRpY2F0b3JTdHlsZTogYW55O1xuICAgIHZhbHVlOiBhbnlbXTtcbiAgICBjaXJjdWxhcjogYm9vbGVhbjtcbiAgICBzaG93SW5kaWNhdG9yczogYm9vbGVhbjtcbiAgICBzaG93TmF2aWdhdG9yczogYm9vbGVhbjtcbiAgICBhdXRvcGxheUludGVydmFsOiBudW1iZXI7XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgb25QYWdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpdGVtc0NvbnRhaW5lcjogRWxlbWVudFJlZjtcbiAgICBoZWFkZXJGYWNldDogYW55O1xuICAgIGZvb3RlckZhY2V0OiBhbnk7XG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBfbnVtVmlzaWJsZTogbnVtYmVyO1xuICAgIF9udW1TY3JvbGw6IG51bWJlcjtcbiAgICBfb2xkTnVtU2Nyb2xsOiBudW1iZXI7XG4gICAgcHJldlN0YXRlOiBhbnk7XG4gICAgZGVmYXVsdE51bVNjcm9sbDogbnVtYmVyO1xuICAgIGRlZmF1bHROdW1WaXNpYmxlOiBudW1iZXI7XG4gICAgX3BhZ2U6IG51bWJlcjtcbiAgICBfdmFsdWU6IGFueVtdO1xuICAgIGNhcm91c2VsU3R5bGU6IGFueTtcbiAgICBpZDogc3RyaW5nO1xuICAgIHRvdGFsU2hpZnRlZEl0ZW1zOiBhbnk7XG4gICAgaXNSZW1haW5pbmdJdGVtc0FkZGVkOiBib29sZWFuO1xuICAgIGFuaW1hdGlvblRpbWVvdXQ6IGFueTtcbiAgICB0cmFuc2xhdGVUaW1lb3V0OiBhbnk7XG4gICAgcmVtYWluaW5nSXRlbXM6IG51bWJlcjtcbiAgICBfaXRlbXM6IGFueVtdO1xuICAgIHN0YXJ0UG9zOiBhbnk7XG4gICAgZG9jdW1lbnRSZXNpemVMaXN0ZW5lcjogYW55O1xuICAgIGNsb25lZEl0ZW1zRm9yU3RhcnRpbmc6IGFueVtdO1xuICAgIGNsb25lZEl0ZW1zRm9yRmluaXNoaW5nOiBhbnlbXTtcbiAgICBhbGxvd0F1dG9wbGF5OiBib29sZWFuO1xuICAgIGludGVydmFsOiBhbnk7XG4gICAgaXNDcmVhdGVkOiBib29sZWFuO1xuICAgIHN3aXBlVGhyZXNob2xkOiBudW1iZXI7XG4gICAgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgY3JlYXRlU3R5bGUoKTogdm9pZDtcbiAgICBjYWxjdWxhdGVQb3NpdGlvbigpOiB2b2lkO1xuICAgIHNldENsb25lSXRlbXMoKTogdm9pZDtcbiAgICBmaXJzdEluZGV4KCk6IG51bWJlcjtcbiAgICBsYXN0SW5kZXgoKTogbnVtYmVyO1xuICAgIHRvdGFsRG90cygpOiBudW1iZXI7XG4gICAgdG90YWxEb3RzQXJyYXkoKTogYW55W107XG4gICAgY29udGFpbmVyQ2xhc3MoKToge1xuICAgICAgICAndWktY2Fyb3VzZWwgdWktd2lkZ2V0JzogYm9vbGVhbjtcbiAgICAgICAgJ3VpLWNhcm91c2VsLXZlcnRpY2FsJzogYm9vbGVhbjtcbiAgICAgICAgJ3VpLWNhcm91c2VsLWhvcml6b250YWwnOiBib29sZWFuO1xuICAgIH07XG4gICAgY29udGVudENsYXNzZXMoKTogc3RyaW5nO1xuICAgIGRvdHNDb250ZW50Q2xhc3NlcygpOiBzdHJpbmc7XG4gICAgaXNWZXJ0aWNhbCgpOiBib29sZWFuO1xuICAgIGlzQ2lyY3VsYXIoKTogYm9vbGVhbjtcbiAgICBpc0F1dG9wbGF5KCk6IGJvb2xlYW47XG4gICAgaXNGb3J3YXJkTmF2RGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBpc0JhY2t3YXJkTmF2RGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW47XG4gICAgbmF2Rm9yd2FyZChlOiBhbnksIGluZGV4PzogYW55KTogdm9pZDtcbiAgICBuYXZCYWNrd2FyZChlOiBhbnksIGluZGV4PzogYW55KTogdm9pZDtcbiAgICBvbkRvdENsaWNrKGU6IGFueSwgaW5kZXg6IGFueSk6IHZvaWQ7XG4gICAgc3RlcChkaXI6IGFueSwgcGFnZTogYW55KTogdm9pZDtcbiAgICBzdGFydEF1dG9wbGF5KCk6IHZvaWQ7XG4gICAgc3RvcEF1dG9wbGF5KCk6IHZvaWQ7XG4gICAgb25UcmFuc2l0aW9uRW5kKCk6IHZvaWQ7XG4gICAgb25Ub3VjaFN0YXJ0KGU6IGFueSk6IHZvaWQ7XG4gICAgb25Ub3VjaE1vdmUoZTogYW55KTogdm9pZDtcbiAgICBvblRvdWNoRW5kKGU6IGFueSk6IHZvaWQ7XG4gICAgY2hhbmdlUGFnZU9uVG91Y2goZTogYW55LCBkaWZmOiBhbnkpOiB2b2lkO1xuICAgIGJpbmREb2N1bWVudExpc3RlbmVycygpOiB2b2lkO1xuICAgIHVuYmluZERvY3VtZW50TGlzdGVuZXJzKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcm91c2VsTW9kdWxlIHtcbn1cbiJdfQ==