import { ElementRef, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, Renderer2, EventEmitter, ChangeDetectorRef, TemplateRef, QueryList } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { SelectItem } from 'primeng-lts/api';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng-lts/api';
import * as ɵngcc3 from '@angular/cdk/scrolling';
import * as ɵngcc4 from 'primeng-lts/tooltip';
export declare const MULTISELECT_VALUE_ACCESSOR: any;
export declare class MultiSelectItem {
    option: any;
    selected: boolean;
    disabled: boolean;
    visible: boolean;
    itemSize: number;
    template: TemplateRef<any>;
    maxSelectionLimitReached: boolean;
    onClick: EventEmitter<any>;
    onKeydown: EventEmitter<any>;
    onOptionClick(event: Event): void;
    onOptionKeydown(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelectItem, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelectItem, "p-multiSelectItem", never, { "option": "option"; "selected": "selected"; "disabled": "disabled"; "visible": "visible"; "itemSize": "itemSize"; "template": "template"; "maxSelectionLimitReached": "maxSelectionLimitReached"; }, { "onClick": "onClick"; "onKeydown": "onKeydown"; }, never, never>;
}
export declare class MultiSelect implements OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    private cd;
    scrollHeight: string;
    _defaultLabel: string;
    defaultLabel: string;
    style: any;
    styleClass: string;
    panelStyle: any;
    panelStyleClass: string;
    inputId: string;
    disabled: boolean;
    readonly: boolean;
    filter: boolean;
    filterPlaceHolder: string;
    filterLocale: string;
    overlayVisible: boolean;
    tabindex: number;
    appendTo: any;
    dataKey: string;
    name: string;
    ariaLabelledBy: string;
    displaySelectedLabel: boolean;
    maxSelectedLabels: number;
    selectionLimit: number;
    selectedItemsLabel: string;
    showToggleAll: boolean;
    emptyFilterMessage: string;
    resetFilterOnHide: boolean;
    dropdownIcon: string;
    optionLabel: string;
    showHeader: boolean;
    autoZIndex: boolean;
    baseZIndex: number;
    filterBy: string;
    virtualScroll: boolean;
    itemSize: number;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    ariaFilterLabel: string;
    filterMatchMode: string;
    tooltip: string;
    tooltipPosition: string;
    tooltipPositionStyle: string;
    tooltipStyleClass: string;
    autofocusFilter: boolean;
    containerViewChild: ElementRef;
    filterInputChild: ElementRef;
    accessibleViewChild: ElementRef;
    footerFacet: any;
    headerFacet: any;
    templates: QueryList<any>;
    onChange: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onClick: EventEmitter<any>;
    onPanelShow: EventEmitter<any>;
    onPanelHide: EventEmitter<any>;
    value: any[];
    onModelChange: Function;
    onModelTouched: Function;
    overlay: HTMLDivElement;
    valuesAsString: string;
    focus: boolean;
    filled: boolean;
    documentClickListener: any;
    filterValue: string;
    visibleOptions: SelectItem[];
    disabledSelectedOptions: SelectItem[];
    filtered: boolean;
    itemTemplate: TemplateRef<any>;
    selectedItemsTemplate: TemplateRef<any>;
    headerCheckboxFocus: boolean;
    _options: any[];
    maxSelectionLimitReached: boolean;
    documentResizeListener: any;
    preventModelTouched: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);
    options: any[];
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    writeValue(value: any): void;
    checkSelectionLimit(): void;
    updateFilledState(): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onOptionClick(event: any): void;
    isSelected(value: any): boolean;
    findSelectionIndex(val: any): number;
    toggleAll(event: Event): void;
    isAllChecked(): boolean;
    isAllVisibleOptionsChecked(): boolean;
    getEnabledOptionCount(): number;
    setDisabledSelectedOptions(): void;
    show(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    appendOverlay(): void;
    restoreOverlayAppend(): void;
    alignOverlay(): void;
    hide(): void;
    close(event: any): void;
    onMouseclick(event: any, input: any): void;
    isOverlayClick(event: any): boolean;
    isOutsideClicked(event: Event): boolean;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onOptionKeydown(event: any): void;
    findNextItem(item: any): any;
    findPrevItem(item: any): any;
    onKeydown(event: KeyboardEvent): void;
    updateLabel(): void;
    findLabelByValue(val: any): string;
    onFilter(): void;
    activateFilter(): void;
    isItemVisible(option: SelectItem): boolean;
    getVisibleOptions(): SelectItem[];
    onHeaderCheckboxFocus(): void;
    onHeaderCheckboxBlur(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    onWindowResize(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelect, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelect, "p-multiSelect", never, { "scrollHeight": "scrollHeight"; "filter": "filter"; "displaySelectedLabel": "displaySelectedLabel"; "maxSelectedLabels": "maxSelectedLabels"; "selectedItemsLabel": "selectedItemsLabel"; "showToggleAll": "showToggleAll"; "emptyFilterMessage": "emptyFilterMessage"; "resetFilterOnHide": "resetFilterOnHide"; "dropdownIcon": "dropdownIcon"; "showHeader": "showHeader"; "autoZIndex": "autoZIndex"; "baseZIndex": "baseZIndex"; "filterBy": "filterBy"; "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; "filterMatchMode": "filterMatchMode"; "tooltip": "tooltip"; "tooltipPosition": "tooltipPosition"; "tooltipPositionStyle": "tooltipPositionStyle"; "autofocusFilter": "autofocusFilter"; "defaultLabel": "defaultLabel"; "options": "options"; "disabled": "disabled"; "overlayVisible": "overlayVisible"; "style": "style"; "styleClass": "styleClass"; "panelStyle": "panelStyle"; "panelStyleClass": "panelStyleClass"; "inputId": "inputId"; "readonly": "readonly"; "filterPlaceHolder": "filterPlaceHolder"; "filterLocale": "filterLocale"; "tabindex": "tabindex"; "appendTo": "appendTo"; "dataKey": "dataKey"; "name": "name"; "ariaLabelledBy": "ariaLabelledBy"; "selectionLimit": "selectionLimit"; "optionLabel": "optionLabel"; "virtualScroll": "virtualScroll"; "itemSize": "itemSize"; "ariaFilterLabel": "ariaFilterLabel"; "tooltipStyleClass": "tooltipStyleClass"; }, { "onChange": "onChange"; "onFocus": "onFocus"; "onBlur": "onBlur"; "onClick": "onClick"; "onPanelShow": "onPanelShow"; "onPanelHide": "onPanelHide"; }, ["footerFacet", "headerFacet", "templates"], ["p-header", "p-footer"]>;
}
export declare class MultiSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MultiSelectModule, [typeof MultiSelect, typeof MultiSelectItem], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ScrollingModule, typeof ɵngcc4.TooltipModule], [typeof MultiSelect, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ScrollingModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MultiSelectModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuZC50cyIsInNvdXJjZXMiOlsibXVsdGlzZWxlY3QuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95LCBSZW5kZXJlcjIsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFRlbXBsYXRlUmVmLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBTZWxlY3RJdGVtIH0gZnJvbSAncHJpbWVuZy1sdHMvYXBpJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTVVMVElTRUxFQ1RfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE11bHRpU2VsZWN0SXRlbSB7XG4gICAgb3B0aW9uOiBhbnk7XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgdmlzaWJsZTogYm9vbGVhbjtcbiAgICBpdGVtU2l6ZTogbnVtYmVyO1xuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG1heFNlbGVjdGlvbkxpbWl0UmVhY2hlZDogYm9vbGVhbjtcbiAgICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbktleWRvd246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uT3B0aW9uQ2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvbk9wdGlvbktleWRvd24oZXZlbnQ6IEV2ZW50KTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE11bHRpU2VsZWN0IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByaXZhdGUgY2Q7XG4gICAgc2Nyb2xsSGVpZ2h0OiBzdHJpbmc7XG4gICAgX2RlZmF1bHRMYWJlbDogc3RyaW5nO1xuICAgIGRlZmF1bHRMYWJlbDogc3RyaW5nO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHBhbmVsU3R5bGU6IGFueTtcbiAgICBwYW5lbFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBpbnB1dElkOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgZmlsdGVyOiBib29sZWFuO1xuICAgIGZpbHRlclBsYWNlSG9sZGVyOiBzdHJpbmc7XG4gICAgZmlsdGVyTG9jYWxlOiBzdHJpbmc7XG4gICAgb3ZlcmxheVZpc2libGU6IGJvb2xlYW47XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICBhcHBlbmRUbzogYW55O1xuICAgIGRhdGFLZXk6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZztcbiAgICBkaXNwbGF5U2VsZWN0ZWRMYWJlbDogYm9vbGVhbjtcbiAgICBtYXhTZWxlY3RlZExhYmVsczogbnVtYmVyO1xuICAgIHNlbGVjdGlvbkxpbWl0OiBudW1iZXI7XG4gICAgc2VsZWN0ZWRJdGVtc0xhYmVsOiBzdHJpbmc7XG4gICAgc2hvd1RvZ2dsZUFsbDogYm9vbGVhbjtcbiAgICBlbXB0eUZpbHRlck1lc3NhZ2U6IHN0cmluZztcbiAgICByZXNldEZpbHRlck9uSGlkZTogYm9vbGVhbjtcbiAgICBkcm9wZG93bkljb246IHN0cmluZztcbiAgICBvcHRpb25MYWJlbDogc3RyaW5nO1xuICAgIHNob3dIZWFkZXI6IGJvb2xlYW47XG4gICAgYXV0b1pJbmRleDogYm9vbGVhbjtcbiAgICBiYXNlWkluZGV4OiBudW1iZXI7XG4gICAgZmlsdGVyQnk6IHN0cmluZztcbiAgICB2aXJ0dWFsU2Nyb2xsOiBib29sZWFuO1xuICAgIGl0ZW1TaXplOiBudW1iZXI7XG4gICAgc2hvd1RyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgaGlkZVRyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgYXJpYUZpbHRlckxhYmVsOiBzdHJpbmc7XG4gICAgZmlsdGVyTWF0Y2hNb2RlOiBzdHJpbmc7XG4gICAgdG9vbHRpcDogc3RyaW5nO1xuICAgIHRvb2x0aXBQb3NpdGlvbjogc3RyaW5nO1xuICAgIHRvb2x0aXBQb3NpdGlvblN0eWxlOiBzdHJpbmc7XG4gICAgdG9vbHRpcFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBhdXRvZm9jdXNGaWx0ZXI6IGJvb2xlYW47XG4gICAgY29udGFpbmVyVmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGZpbHRlcklucHV0Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgYWNjZXNzaWJsZVZpZXdDaGlsZDogRWxlbWVudFJlZjtcbiAgICBmb290ZXJGYWNldDogYW55O1xuICAgIGhlYWRlckZhY2V0OiBhbnk7XG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25CbHVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblBhbmVsU2hvdzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25QYW5lbEhpZGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHZhbHVlOiBhbnlbXTtcbiAgICBvbk1vZGVsQ2hhbmdlOiBGdW5jdGlvbjtcbiAgICBvbk1vZGVsVG91Y2hlZDogRnVuY3Rpb247XG4gICAgb3ZlcmxheTogSFRNTERpdkVsZW1lbnQ7XG4gICAgdmFsdWVzQXNTdHJpbmc6IHN0cmluZztcbiAgICBmb2N1czogYm9vbGVhbjtcbiAgICBmaWxsZWQ6IGJvb2xlYW47XG4gICAgZG9jdW1lbnRDbGlja0xpc3RlbmVyOiBhbnk7XG4gICAgZmlsdGVyVmFsdWU6IHN0cmluZztcbiAgICB2aXNpYmxlT3B0aW9uczogU2VsZWN0SXRlbVtdO1xuICAgIGRpc2FibGVkU2VsZWN0ZWRPcHRpb25zOiBTZWxlY3RJdGVtW107XG4gICAgZmlsdGVyZWQ6IGJvb2xlYW47XG4gICAgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHNlbGVjdGVkSXRlbXNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBoZWFkZXJDaGVja2JveEZvY3VzOiBib29sZWFuO1xuICAgIF9vcHRpb25zOiBhbnlbXTtcbiAgICBtYXhTZWxlY3Rpb25MaW1pdFJlYWNoZWQ6IGJvb2xlYW47XG4gICAgZG9jdW1lbnRSZXNpemVMaXN0ZW5lcjogYW55O1xuICAgIHByZXZlbnRNb2RlbFRvdWNoZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgb3B0aW9uczogYW55W107XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIGNoZWNrU2VsZWN0aW9uTGltaXQoKTogdm9pZDtcbiAgICB1cGRhdGVGaWxsZWRTdGF0ZSgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUodmFsOiBib29sZWFuKTogdm9pZDtcbiAgICBvbk9wdGlvbkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGlzU2VsZWN0ZWQodmFsdWU6IGFueSk6IGJvb2xlYW47XG4gICAgZmluZFNlbGVjdGlvbkluZGV4KHZhbDogYW55KTogbnVtYmVyO1xuICAgIHRvZ2dsZUFsbChldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIGlzQWxsQ2hlY2tlZCgpOiBib29sZWFuO1xuICAgIGlzQWxsVmlzaWJsZU9wdGlvbnNDaGVja2VkKCk6IGJvb2xlYW47XG4gICAgZ2V0RW5hYmxlZE9wdGlvbkNvdW50KCk6IG51bWJlcjtcbiAgICBzZXREaXNhYmxlZFNlbGVjdGVkT3B0aW9ucygpOiB2b2lkO1xuICAgIHNob3coKTogdm9pZDtcbiAgICBvbk92ZXJsYXlBbmltYXRpb25TdGFydChldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xuICAgIGFwcGVuZE92ZXJsYXkoKTogdm9pZDtcbiAgICByZXN0b3JlT3ZlcmxheUFwcGVuZCgpOiB2b2lkO1xuICAgIGFsaWduT3ZlcmxheSgpOiB2b2lkO1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICBjbG9zZShldmVudDogYW55KTogdm9pZDtcbiAgICBvbk1vdXNlY2xpY2soZXZlbnQ6IGFueSwgaW5wdXQ6IGFueSk6IHZvaWQ7XG4gICAgaXNPdmVybGF5Q2xpY2soZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgaXNPdXRzaWRlQ2xpY2tlZChldmVudDogRXZlbnQpOiBib29sZWFuO1xuICAgIG9uSW5wdXRGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Qmx1cihldmVudDogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvbktleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgZmluZE5leHRJdGVtKGl0ZW06IGFueSk6IGFueTtcbiAgICBmaW5kUHJldkl0ZW0oaXRlbTogYW55KTogYW55O1xuICAgIG9uS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgdXBkYXRlTGFiZWwoKTogdm9pZDtcbiAgICBmaW5kTGFiZWxCeVZhbHVlKHZhbDogYW55KTogc3RyaW5nO1xuICAgIG9uRmlsdGVyKCk6IHZvaWQ7XG4gICAgYWN0aXZhdGVGaWx0ZXIoKTogdm9pZDtcbiAgICBpc0l0ZW1WaXNpYmxlKG9wdGlvbjogU2VsZWN0SXRlbSk6IGJvb2xlYW47XG4gICAgZ2V0VmlzaWJsZU9wdGlvbnMoKTogU2VsZWN0SXRlbVtdO1xuICAgIG9uSGVhZGVyQ2hlY2tib3hGb2N1cygpOiB2b2lkO1xuICAgIG9uSGVhZGVyQ2hlY2tib3hCbHVyKCk6IHZvaWQ7XG4gICAgYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIGJpbmREb2N1bWVudFJlc2l6ZUxpc3RlbmVyKCk6IHZvaWQ7XG4gICAgdW5iaW5kRG9jdW1lbnRSZXNpemVMaXN0ZW5lcigpOiB2b2lkO1xuICAgIG9uV2luZG93UmVzaXplKCk6IHZvaWQ7XG4gICAgb25PdmVybGF5SGlkZSgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNdWx0aVNlbGVjdE1vZHVsZSB7XG59XG4iXX0=