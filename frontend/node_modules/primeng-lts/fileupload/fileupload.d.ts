import { OnDestroy, EventEmitter, TemplateRef, AfterViewInit, AfterContentInit, QueryList, ElementRef, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Message } from 'primeng-lts/api';
import { BlockableUI } from 'primeng-lts/api';
import { HttpClient, HttpHeaders } from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng-lts/api';
import * as ɵngcc3 from 'primeng-lts/button';
import * as ɵngcc4 from 'primeng-lts/progressbar';
import * as ɵngcc5 from 'primeng-lts/messages';
export declare class FileUpload implements AfterViewInit, AfterContentInit, OnDestroy, BlockableUI {
    private el;
    sanitizer: DomSanitizer;
    zone: NgZone;
    private http;
    name: string;
    url: string;
    method: string;
    multiple: boolean;
    accept: string;
    disabled: boolean;
    auto: boolean;
    withCredentials: boolean;
    maxFileSize: number;
    invalidFileSizeMessageSummary: string;
    invalidFileSizeMessageDetail: string;
    invalidFileTypeMessageSummary: string;
    invalidFileTypeMessageDetail: string;
    invalidFileLimitMessageDetail: string;
    invalidFileLimitMessageSummary: string;
    style: any;
    styleClass: string;
    previewWidth: number;
    chooseLabel: string;
    uploadLabel: string;
    cancelLabel: string;
    chooseIcon: string;
    uploadIcon: string;
    cancelIcon: string;
    showUploadButton: boolean;
    showCancelButton: boolean;
    mode: string;
    headers: HttpHeaders;
    customUpload: boolean;
    fileLimit: number;
    onBeforeUpload: EventEmitter<any>;
    onSend: EventEmitter<any>;
    onUpload: EventEmitter<any>;
    onError: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onRemove: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onProgress: EventEmitter<any>;
    uploadHandler: EventEmitter<any>;
    templates: QueryList<any>;
    advancedFileInput: ElementRef;
    basicFileInput: ElementRef;
    content: ElementRef;
    files: File[];
    _files: File[];
    progress: number;
    dragHighlight: boolean;
    msgs: Message[];
    fileTemplate: TemplateRef<any>;
    contentTemplate: TemplateRef<any>;
    toolbarTemplate: TemplateRef<any>;
    uploadedFileCount: number;
    focus: boolean;
    uploading: boolean;
    duplicateIEEvent: boolean;
    constructor(el: ElementRef, sanitizer: DomSanitizer, zone: NgZone, http: HttpClient);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    onFileSelect(event: any): void;
    isFileSelected(file: File): boolean;
    isIE11(): boolean;
    validate(file: File): boolean;
    private isFileTypeValid;
    getTypeClass(fileType: string): string;
    isWildcard(fileType: string): boolean;
    getFileExtension(file: File): string;
    isImage(file: File): boolean;
    onImageLoad(img: any): void;
    upload(): void;
    clear(): void;
    remove(event: Event, index: number): void;
    isFileLimitExceeded(): boolean;
    isChooseDisabled(): boolean;
    checkFileLimit(): void;
    clearInputElement(): void;
    clearIEInput(): void;
    hasFiles(): boolean;
    onDragEnter(e: any): void;
    onDragOver(e: any): void;
    onDragLeave(event: any): void;
    onDrop(event: any): void;
    onFocus(): void;
    onBlur(): void;
    formatSize(bytes: any): string;
    onSimpleUploaderClick(event: Event): void;
    getBlockableElement(): HTMLElement;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileUpload, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileUpload, "p-fileUpload", never, { "method": "method"; "invalidFileSizeMessageSummary": "invalidFileSizeMessageSummary"; "invalidFileSizeMessageDetail": "invalidFileSizeMessageDetail"; "invalidFileTypeMessageSummary": "invalidFileTypeMessageSummary"; "invalidFileTypeMessageDetail": "invalidFileTypeMessageDetail"; "invalidFileLimitMessageDetail": "invalidFileLimitMessageDetail"; "invalidFileLimitMessageSummary": "invalidFileLimitMessageSummary"; "previewWidth": "previewWidth"; "chooseLabel": "chooseLabel"; "uploadLabel": "uploadLabel"; "cancelLabel": "cancelLabel"; "chooseIcon": "chooseIcon"; "uploadIcon": "uploadIcon"; "cancelIcon": "cancelIcon"; "showUploadButton": "showUploadButton"; "showCancelButton": "showCancelButton"; "mode": "mode"; "files": "files"; "name": "name"; "url": "url"; "multiple": "multiple"; "accept": "accept"; "disabled": "disabled"; "auto": "auto"; "withCredentials": "withCredentials"; "maxFileSize": "maxFileSize"; "style": "style"; "styleClass": "styleClass"; "headers": "headers"; "customUpload": "customUpload"; "fileLimit": "fileLimit"; }, { "onBeforeUpload": "onBeforeUpload"; "onSend": "onSend"; "onUpload": "onUpload"; "onError": "onError"; "onClear": "onClear"; "onRemove": "onRemove"; "onSelect": "onSelect"; "onProgress": "onProgress"; "uploadHandler": "uploadHandler"; }, ["templates"], never>;
}
export declare class FileUploadModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<FileUploadModule, [typeof FileUpload], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule], [typeof FileUpload, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<FileUploadModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXVwbG9hZC5kLnRzIiwic291cmNlcyI6WyJmaWxldXBsb2FkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBRdWVyeUxpc3QsIEVsZW1lbnRSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAncHJpbWVuZy1sdHMvYXBpJztcbmltcG9ydCB7IEJsb2NrYWJsZVVJIH0gZnJvbSAncHJpbWVuZy1sdHMvYXBpJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaWxlVXBsb2FkIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBCbG9ja2FibGVVSSB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBzYW5pdGl6ZXI6IERvbVNhbml0aXplcjtcbiAgICB6b25lOiBOZ1pvbmU7XG4gICAgcHJpdmF0ZSBodHRwO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBhY2NlcHQ6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBhdXRvOiBib29sZWFuO1xuICAgIHdpdGhDcmVkZW50aWFsczogYm9vbGVhbjtcbiAgICBtYXhGaWxlU2l6ZTogbnVtYmVyO1xuICAgIGludmFsaWRGaWxlU2l6ZU1lc3NhZ2VTdW1tYXJ5OiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVTaXplTWVzc2FnZURldGFpbDogc3RyaW5nO1xuICAgIGludmFsaWRGaWxlVHlwZU1lc3NhZ2VTdW1tYXJ5OiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVUeXBlTWVzc2FnZURldGFpbDogc3RyaW5nO1xuICAgIGludmFsaWRGaWxlTGltaXRNZXNzYWdlRGV0YWlsOiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVMaW1pdE1lc3NhZ2VTdW1tYXJ5OiBzdHJpbmc7XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgcHJldmlld1dpZHRoOiBudW1iZXI7XG4gICAgY2hvb3NlTGFiZWw6IHN0cmluZztcbiAgICB1cGxvYWRMYWJlbDogc3RyaW5nO1xuICAgIGNhbmNlbExhYmVsOiBzdHJpbmc7XG4gICAgY2hvb3NlSWNvbjogc3RyaW5nO1xuICAgIHVwbG9hZEljb246IHN0cmluZztcbiAgICBjYW5jZWxJY29uOiBzdHJpbmc7XG4gICAgc2hvd1VwbG9hZEJ1dHRvbjogYm9vbGVhbjtcbiAgICBzaG93Q2FuY2VsQnV0dG9uOiBib29sZWFuO1xuICAgIG1vZGU6IHN0cmluZztcbiAgICBoZWFkZXJzOiBIdHRwSGVhZGVycztcbiAgICBjdXN0b21VcGxvYWQ6IGJvb2xlYW47XG4gICAgZmlsZUxpbWl0OiBudW1iZXI7XG4gICAgb25CZWZvcmVVcGxvYWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU2VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25VcGxvYWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ2xlYXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUmVtb3ZlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Qcm9ncmVzczogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdXBsb2FkSGFuZGxlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBhZHZhbmNlZEZpbGVJbnB1dDogRWxlbWVudFJlZjtcbiAgICBiYXNpY0ZpbGVJbnB1dDogRWxlbWVudFJlZjtcbiAgICBjb250ZW50OiBFbGVtZW50UmVmO1xuICAgIGZpbGVzOiBGaWxlW107XG4gICAgX2ZpbGVzOiBGaWxlW107XG4gICAgcHJvZ3Jlc3M6IG51bWJlcjtcbiAgICBkcmFnSGlnaGxpZ2h0OiBib29sZWFuO1xuICAgIG1zZ3M6IE1lc3NhZ2VbXTtcbiAgICBmaWxlVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY29udGVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHRvb2xiYXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB1cGxvYWRlZEZpbGVDb3VudDogbnVtYmVyO1xuICAgIGZvY3VzOiBib29sZWFuO1xuICAgIHVwbG9hZGluZzogYm9vbGVhbjtcbiAgICBkdXBsaWNhdGVJRUV2ZW50OiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgem9uZTogTmdab25lLCBodHRwOiBIdHRwQ2xpZW50KTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBvbkZpbGVTZWxlY3QoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaXNGaWxlU2VsZWN0ZWQoZmlsZTogRmlsZSk6IGJvb2xlYW47XG4gICAgaXNJRTExKCk6IGJvb2xlYW47XG4gICAgdmFsaWRhdGUoZmlsZTogRmlsZSk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBpc0ZpbGVUeXBlVmFsaWQ7XG4gICAgZ2V0VHlwZUNsYXNzKGZpbGVUeXBlOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgaXNXaWxkY2FyZChmaWxlVHlwZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBnZXRGaWxlRXh0ZW5zaW9uKGZpbGU6IEZpbGUpOiBzdHJpbmc7XG4gICAgaXNJbWFnZShmaWxlOiBGaWxlKTogYm9vbGVhbjtcbiAgICBvbkltYWdlTG9hZChpbWc6IGFueSk6IHZvaWQ7XG4gICAgdXBsb2FkKCk6IHZvaWQ7XG4gICAgY2xlYXIoKTogdm9pZDtcbiAgICByZW1vdmUoZXZlbnQ6IEV2ZW50LCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBpc0ZpbGVMaW1pdEV4Y2VlZGVkKCk6IGJvb2xlYW47XG4gICAgaXNDaG9vc2VEaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIGNoZWNrRmlsZUxpbWl0KCk6IHZvaWQ7XG4gICAgY2xlYXJJbnB1dEVsZW1lbnQoKTogdm9pZDtcbiAgICBjbGVhcklFSW5wdXQoKTogdm9pZDtcbiAgICBoYXNGaWxlcygpOiBib29sZWFuO1xuICAgIG9uRHJhZ0VudGVyKGU6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnT3ZlcihlOiBhbnkpOiB2b2lkO1xuICAgIG9uRHJhZ0xlYXZlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uRHJvcChldmVudDogYW55KTogdm9pZDtcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgZm9ybWF0U2l6ZShieXRlczogYW55KTogc3RyaW5nO1xuICAgIG9uU2ltcGxlVXBsb2FkZXJDbGljayhldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIGdldEJsb2NrYWJsZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpbGVVcGxvYWRNb2R1bGUge1xufVxuIl19